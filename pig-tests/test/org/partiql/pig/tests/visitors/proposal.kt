/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 *  permissions and limitations under the License.
 */

package org.partiql.pig.tests.visitors

import com.amazon.ionelement.api.MetaContainer
import org.partiql.pig.runtime.DomainVisitorBase
import org.partiql.pig.runtime.LongPrimitive
import org.partiql.pig.runtime.SymbolPrimitive
import org.partiql.pig.tests.generated.demo_ast


// Note: contents of this class would be generated by PIG and placed inside of the demo_ast class.

class demo_ast_ private constructor() {

    open class VisitorBase : DomainVisitorBase() {
        protected fun <T: demo_ast.demo_ast_node> build(block: demo_ast.builder.() -> T): T =
            demo_ast.builder.block()

        ///////////////////////////////////////////////////////////////
        // expr
        ///////////////////////////////////////////////////////////////
        fun visit_expr(node: demo_ast.expr): demo_ast.expr =
            when(node) {
                is demo_ast.expr.literal -> visit_expr_literal(node)
                is demo_ast.expr.variable -> visit_expr_variable(node)
                is demo_ast.expr.apply -> visit_expr_apply(node)
                is demo_ast.expr.let -> visit_expr_let(node)
            }

        //////////////////////
        // expr.apply
        //////////////////////
        protected open fun visit_expr_apply(node: demo_ast.expr.apply): demo_ast.expr {
            val new_op0 = visit_expr_apply_op0(node)
            val new_expr1 = visit_expr_apply_expr1(node)
            val new_expr2 = visit_expr_apply_expr2(node)
            val new_metas = visit_expr_apply_metas(node)

            return build {
                apply(new_op0, new_expr1, new_expr2, new_metas)
            }
        }

        protected open fun visit_expr_apply_op0(node: demo_ast.expr.apply): demo_ast.operator =
            visit_operator(node.operator0)

        protected open fun visit_expr_apply_expr1(node: demo_ast.expr.apply): demo_ast.expr =
            visit_expr(node.expr1)

        protected open fun visit_expr_apply_expr2(node: demo_ast.expr.apply): demo_ast.expr =
            visit_expr(node.expr2)

        protected open fun visit_expr_apply_metas(node: demo_ast.expr.apply): MetaContainer =
            super.visitMetas(node.metas)


        //////////////////////
        // expr.let
        //////////////////////
        protected open fun visit_expr_let(node: demo_ast.expr.let): demo_ast.expr {
            val new_symbol0 = visit_expr_let_symbol0(node)
            val new_expr1 = visit_expr_let_expr1(node)
            val new_expr2 = visit_expr_let_expr2(node)
            val new_metas = visit_expr_let_metas(node)

            return build {
                let_(new_symbol0, new_expr1, new_expr2, new_metas)
            }
        }

        protected open fun visit_expr_let_symbol0(node: demo_ast.expr.let): SymbolPrimitive =
            super.visitSymbol(node.symbol0)

        protected open fun visit_expr_let_expr1(node: demo_ast.expr.let): demo_ast.expr =
            visit_expr(node.expr1)

        protected open fun visit_expr_let_expr2(node: demo_ast.expr.let): demo_ast.expr =
            visit_expr(node.expr2)

        protected open fun visit_expr_let_metas(node: demo_ast.expr.let): MetaContainer =
            super.visitMetas(node.metas)

        //////////////////////
        // expr.variable
        //////////////////////
        protected open fun visit_expr_variable(node: demo_ast.expr.variable): demo_ast.expr {
            val new_symbol0 = visit_expr_variable_symbol0(node)
            val new_metas = visit_expr_variable_metas(node)
            return build {
                variable_(new_symbol0, new_metas)
            }
        }

        protected open fun visit_expr_variable_symbol0(node: demo_ast.expr.variable): SymbolPrimitive =
            super.visitSymbol(node.symbol0)

        protected open fun visit_expr_variable_metas(node: demo_ast.expr.variable): MetaContainer =
            super.visitMetas(node.metas)


        //////////////////////
        // expr.literal
        //////////////////////
        protected open fun visit_expr_literal(node: demo_ast.expr.literal): demo_ast.expr {
            val new_int0 = visit_expr_literal_int0(node)
            val new_metas = visit_expr_literal_metas(node)
            return build {
                literal_(new_int0, new_metas)
            }
        }

        protected open fun visit_expr_literal_int0(node: demo_ast.expr.literal): LongPrimitive =
            super.visitLong(node.int0)

        protected open fun visit_expr_literal_metas(node: demo_ast.expr.literal): MetaContainer =
            super.visitMetas(node.metas)

        ///////////////////////////////////////////////////////////////
        // operator
        ///////////////////////////////////////////////////////////////
        protected open fun visit_operator(node: demo_ast.operator): demo_ast.operator =
            when(node) {
                is demo_ast.operator.plus -> visit_operator_plus(node)
                is demo_ast.operator.minus -> visit_operator_minus(node)
                is demo_ast.operator.mul -> visit_operator_mul(node)
                is demo_ast.operator.div -> visit_operator_div(node)
            }

        //////////////////////
        // operator.plus
        //////////////////////
        protected open fun visit_operator_plus(node: demo_ast.operator.plus): demo_ast.operator {
            val new_metas = visit_operator_plus_metas(node)
            return build {
                plus(new_metas)
            }
        }

        protected open fun visit_operator_plus_metas(node: demo_ast.operator.plus): MetaContainer =
            super.visitMetas(node.metas)

        //////////////////////
        // operator.minus
        //////////////////////
        protected open fun visit_operator_minus(node: demo_ast.operator.minus): demo_ast.operator {
            val new_metas = visit_operator_minus_metas(node)
            return build {
                plus(new_metas)
            }
        }

        protected open fun visit_operator_minus_metas(node: demo_ast.operator.minus): MetaContainer =
            super.visitMetas(node.metas)

        //////////////////////
        // operator.mul
        //////////////////////
        protected open fun visit_operator_mul(node: demo_ast.operator.mul): demo_ast.operator {
            val new_metas = visit_operator_mul_metas(node)
            return build {
                plus(new_metas)
            }
        }

        //////////////////////
        // operator.mul
        //////////////////////
        protected open fun visit_operator_mul_metas(node: demo_ast.operator.mul): MetaContainer =
            super.visitMetas(node.metas)

        protected open fun visit_operator_div(node: demo_ast.operator.div): demo_ast.operator {
            val new_metas = visit_operator_div_metas(node)
            return build {
                plus(new_metas)
            }
        }

        protected open fun visit_operator_div_metas(node: demo_ast.operator.div): MetaContainer =
            super.visitMetas(node.metas)
    }

}
